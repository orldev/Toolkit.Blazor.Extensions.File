@inject IJSRuntime JsRuntime
@inject ILogger<TExportFile> Logger
@implements IAsyncDisposable
@inherits CaptureUnmatchedParameters

<div class="@Classes _q" @attributes="@Attributes" @onclick="_onTask">
    @ChildContent?.Invoke(Name)
</div>

@code {
    /// <summary>
    /// Child content to render inside the component. Receives the <see cref="Name"/> parameter as context.
    /// </summary>
    [Parameter] public RenderFragment<string?>? ChildContent { get; set; }

    /// <summary>
    /// The name to use for the downloaded file (without extension).
    /// </summary>
    [Parameter] public string? Name { get; set; }

    /// <summary>
    /// The binary data to be downloaded when the component is clicked.
    /// </summary>
    [Parameter] public Binary? Binary { get; set; }
    
    private IJSObjectReference? _module;
    
    /// <summary>
    /// Initializes the JavaScript module for file download on first render.
    /// </summary>
    /// <param name="firstRender">True if this is the first time the component is being rendered.</param>
    /// <remarks>
    /// Loads the JavaScript module from "_content/Snail.Toolkit.Blazor.Extensions.File/downloadFile.js".
    /// Logs any errors that occur during module loading.
    /// </remarks>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {   
                _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Snail.Toolkit.Blazor.Extensions.File/downloadFile.js");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex.Message);
            }
        }
    }
    
    /// <summary>
    /// Handles the click event to initiate file download.
    /// </summary>
    /// <remarks>
    /// When clicked, if <see cref="Binary"/> data is available, triggers a file download
    /// with the combined <see cref="Name"/> and appropriate file extension based on the MIME type.
    /// Does nothing if either <see cref="Binary"/> is null or the JavaScript module failed to load.
    /// </remarks>
    private async Task _onTask()
    {
        if (Binary is null || _module is null)
            return;
        // TODO: application/octet-stream -> .exe
        var name = $"{Name}.{Binary.MimeType.Split("/", StringSplitOptions.RemoveEmptyEntries)[1]}";
        Console.WriteLine($"[TE] {name}");
        await _module.InvokeVoidAsync("file", name, Binary.MimeType, Binary.Bytes);
    }
    
    /// <summary>
    /// Cleans up the JavaScript module reference when the component is disposed.
    /// </summary>
    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
            await _module.DisposeAsync();
    }
}