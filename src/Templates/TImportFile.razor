@inherits CaptureUnmatchedParameters
@inject ILogger<TImportFile> Logger
@implements IDisposable

<div class="@Classes _q" @attributes="@Attributes">
    <label class="_w" for="@_id">
        @if (ChildContent is not null)
        {
            @ChildContent(_uploaded)
        }
    </label>
    <InputFile @attributes="@_attributes" style="display: none" OnChange="@_onTask"/>   
</div>

@code {
    /// <summary>
    /// Child content to render inside the component. Receives a boolean parameter indicating upload status.
    /// </summary>
    [Parameter] public RenderFragment<bool>? ChildContent { get; set; }

    /// <summary>
    /// Callback invoked when file upload is complete, providing the uploaded binary data.
    /// </summary>
    [Parameter] public EventCallback<Binary> OnUpload { get; set; }

    /// <summary>
    /// Callback invoked during file upload to report progress percentage.
    /// </summary>
    [Parameter] public EventCallback<int> OnProgress { get; set; }

    /// <summary>
    /// Maximum allowed file size in bytes (default: 200MB).
    /// </summary>
    [Parameter] public int MaxAllowedSize { get; set; } = 200_000_000;

    /// <summary>
    /// Determines whether multiple files can be selected for upload.
    /// </summary>
    [Parameter] public bool Multiple { get; set; }

    /// <summary>
    /// Specifies the types of files that the server accepts (e.g., "image/*", ".pdf").
    /// </summary>
    [Parameter] public string? Accept { get; set; }

    private readonly CompositeDisposable _disposables = new();
    private Dictionary<string, object>? _attributes;
    private string? _id;
    private bool _uploaded;
    
    /// <summary>
    /// Initializes the component by generating a unique ID and setting up input attributes.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        _id = Guid.NewGuid().ToString()[..5];

        _attributes = new Dictionary<string, object>
        {
            { "id", _id }
        };

        if (!string.IsNullOrEmpty(Accept))
            _attributes["accept"] = Accept;

        if (Multiple)
            _attributes["multiple"] = "true";

        await base.OnInitializedAsync();
    }
    
    /// <summary>
    /// Handles file selection change event and initiates the upload process.
    /// </summary>
    /// <param name="e">Event arguments containing the selected file(s).</param>
    private void _onTask(InputFileChangeEventArgs e)
    {
        _uploaded = true;
        
        e.GetMultipleFiles().ToObservable()
            .SelectMany(UploadFileWithProgress)
            .Subscribe(
                binary => OnUpload.InvokeAsync(binary),
                error => {
                    _uploaded = false;
                    Logger.LogError("Upload failed: {Error}", error);
                },
                () => _uploaded = false)
            .AddTo(_disposables);
    }
    
    /// <summary>
    /// Uploads a file while reporting progress updates.
    /// </summary>
    /// <param name="file">The browser file to upload.</param>
    /// <returns>An observable that emits the uploaded binary data when complete.</returns>
    private IObservable<Binary> UploadFileWithProgress(IBrowserFile file)
    {
        return Observable.Create<Binary>(async (observer, ct) =>
        {
            await using var ms = new MemoryStream();
            var stream = file.OpenReadStream(MaxAllowedSize);
            var buffer = new byte[81920];
            long totalRead = 0;
            int read;
            
            while ((read = await stream.ReadAsync(buffer, ct)) > 0)
            {
                await ms.WriteAsync(buffer.AsMemory(0, read), ct);
                totalRead += read;
                var progress = (int)((double)totalRead / file.Size * 100);
                await OnProgress.InvokeAsync(progress);
            }
            
            observer.OnNext(new Binary(ms.ToArray(), file.ContentType));
            observer.OnCompleted();
            await OnProgress.InvokeAsync(0);
        });
    }
    
    /// <summary>
    /// Disposes of the component and cleans up any active subscriptions.
    /// </summary>
    public void Dispose()
    {
        _disposables.Dispose();
    }
}